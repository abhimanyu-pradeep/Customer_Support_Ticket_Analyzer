from pydantic import BaseModel,Field
from abc import ABC, abstractmethod

class Ticket(BaseModel):
    """
    pydant model to represent structure of incoming ticket
    """
    ticket_id: str=Field(description="Unique identifier for ticket")
    customer_tier: str = Field(description="Customer's service tier (free, premium, enterprise).")
    subject: str = Field(description="Subject line of the support ticket.")
    message: str = Field(description="Full message content of the support ticket.")
    previous_tickets: int = Field(description="Number of previous tickets from this customer.")
    monthly_revenue: float = Field(description="Average monthly revenue generated by this customer.")
    account_age_days: int = Field(description="Age of the customer's account in days.")

class AgentOutput(BaseModel):
    '''
    Model to represent structured output of agents analysis
    '''
    category: str = Field(description="Categorization of the ticket (e.g., Technical - API, Billing, Account Management).")
    priority: str = Field(description="Priority level of the ticket (Info, Low, Medium, High, Critical).")
    recommended_team: str = Field(description="Recommended team for routing the ticket (e.g., Engineering, Customer Success, Sales Support).")
    reasoning: str = Field(description="Detailed reasoning for the agent's decisions.")
    
class BaseAgent(ABC):
    '''
    abstract class for all AI agents in the system
    '''
    @abstractmethod
    def analyze(self, ticket: Ticket)-> AgentOutput:
        """
        Abstract method to analyze a given ticket and produce structured output.

        Args:
            ticket (Ticket): The Pydantic model instance of the incoming ticket.

        Returns:
            AgentOutput: A Pydantic model instance containing the agent's analysis.
        """
        pass